rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isSuperAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin'];
    }
    
    function getUserTenant() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.tenantId;
    }
    
    function isSameTenant(tenantId) {
      return isSuperAdmin() || getUserTenant() == tenantId;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Global collections (SuperAdmin only)
    match /tenants/{tenantId} {
      allow read, write: if isSuperAdmin();
    }
    
    match /auditLogs/{logId} {
      allow create: if isAuthenticated();
      allow read: if isSuperAdmin() || 
                     (isAuthenticated() && resource.data.tenantId == getUserTenant());
      allow update, delete: if false;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && isSameTenant(resource.data.tenantId);
      allow create: if isAdmin() && request.resource.data.tenantId == getUserTenant();
      allow update: if isAuthenticated() && 
                       (userId == request.auth.uid || isAdmin()) &&
                       isSameTenant(resource.data.tenantId);
      allow delete: if isAdmin() && isSameTenant(resource.data.tenantId);
    }
    
    // Tenant-isolated collections
    match /{collection}/{docId} {
      allow read: if isAuthenticated() && 
                     collection in ['checkIns', 'alerts', 'messages', 'goals', 'objectives', 
                                    'assignments', 'meetings', 'supportGroups', 'topicRooms',
                                    'resources', 'milestones', 'pirNotes', 'notifications',
                                    'moderationActions', 'userWarnings', 'meetingAttendance',
                                    'messageReactions', 'activities', 'pledges', 'coachNotes',
                                    'checkInReviews', 'sessionFlags'] &&
                     isSameTenant(resource.data.tenantId);
      
      allow create: if isAuthenticated() && 
                       collection in ['checkIns', 'alerts', 'messages', 'goals', 'objectives',
                                      'assignments', 'meetings', 'supportGroups', 'topicRooms',
                                      'resources', 'milestones', 'pirNotes', 'notifications',
                                      'moderationActions', 'userWarnings', 'meetingAttendance',
                                      'messageReactions', 'activities', 'pledges', 'coachNotes',
                                      'checkInReviews', 'sessionFlags'] &&
                       request.resource.data.tenantId == getUserTenant();
      
      allow update, delete: if isAuthenticated() && 
                               collection in ['checkIns', 'alerts', 'messages', 'goals', 'objectives',
                                              'assignments', 'meetings', 'supportGroups', 'topicRooms',
                                              'resources', 'milestones', 'pirNotes', 'notifications',
                                              'moderationActions', 'userWarnings', 'meetingAttendance',
                                              'messageReactions', 'activities', 'pledges', 'coachNotes',
                                              'checkInReviews', 'sessionFlags'] &&
                               isSameTenant(resource.data.tenantId);
    }
    
    // Mail collection (email queue)
    match /mail/{mailId} {
      allow create: if isAuthenticated();
      allow read, update, delete: if false; // Handled by Cloud Functions
    }
    
    // Settings collection (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Presence collection
    match /presence/{userId} {
      allow read, write: if isAuthenticated();
    }
  }
}
